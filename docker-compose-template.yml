version: '2'
services:

  postgresql:
    image: postgres:16
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=${KC_DB_USERNAME}
      - POSTGRES_PASSWORD=${KC_DB_PASSWORD}
    volumes:
      - 'keycloak-postgresql-data:/var/lib/postgresql/data'
    ports:
      - "5434:5432"  
    networks:
      obox:
            
  ${KEYCLOAK_HOST}:
    build: ./keycloak
    restart: always
    command: 
      - start
      - --hostname-port=8443
      # - --spi-theme-default=keycloak
      - --spi-theme-static-max-age=-1
      - --spi-theme-cache-themes=false 
      - --spi-theme-cache-templates=false      

    depends_on:
      - postgresql
    hostname: ${KEYCLOAK_HOST}
    ports:
      - "8443:8443"
    environment:
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_URL: https://${KEYCLOAK_HOST}:8443
      KC_HOSTNAME_ADMIN_URL: https://${KEYCLOAK_HOST}:8443
      KC_HOSTNAME_PORT: 8443
      KC_HTTP_ENABLED: false
      KC_HTTP_PORT: 8443
      KC_HTTPS_PORT: 8443
      KC_PROXY: passthrough
      KC_DB: postgres
      KC_DB_URL_HOST: postgresql
      KC_DB_URL_DATABASE: keycloak 
      KC_DB_SCHEMA: public
      KC_DB_URL: jdbc:postgresql://postgresql/keycloak
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}     
      
      KC_HTTPS_CERTIFICATE_FILE: /etc/x509/https/keycloak.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/x509/https/keycloak.pem
      # KC_SPI_THEME_DEFAULT: keycloak

    networks:
      - obox 
    extra_hosts:
      - "host.docker.internal:host-gateway"
#    End of keycloak

  nginx:
    hostname: ${REVERSE_PROXY_HOST}
    build: 
      context: ./nginx
      cache_from: []
    ports:
      - 80:80
      - 443:443
    networks:
      - obox 
    restart: always
      
    extra_hosts:
      - "host.docker.internal:host-gateway"  

  oauth2proxy:
    build: ./oauth2proxy
    command:
      - --http-address
      - 0.0.0.0:4180 
      - --cookie-domain
      - ${OAUTH2_PROXY_COOKIE_DOMAIN}
      - --whitelist-domain=${OAUTH2_PROXY_WHITELIST_DOMAIN}
    hostname: ${OAUTH2PROXY_HOST}
    restart: always
    environment:
      # Without defining of the option OAUTH2_PROXY_UPSTREAMS main page is nto opened.
      OAUTH2_PROXY_UPSTREAMS: https://${REVERSE_PROXY_HOST}/
      OAUTH2_PROXY_UPSTREAM_TIMEOUT: 10s
      
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: ${OAUTH2_PROXY_PROVIDER_DISPLAY_NAME}
      OAUTH2_PROXY_OIDC_ISSUER_URL: https://${KEYCLOAK_HOST}:8443/realms/master
      
      OAUTH2_PROXY_CLIENT_ID: opcfy
      
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_CODE_CHALLENGE_METHOD: S256

      OAUTH2_PROXY_PASS_ACCESS_TOKEN: true 
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: true
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: true
      
      OAUTH2_PROXY_EMAIL_DOMAINS: '*' 
      
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: false
      OAUTH2_PROXY_COOKIE_NAME: OVL_SESSION
      OAUTH2_PROXY_COOKIE_SAMESITE: lax 
      OAUTH2_PROXY_SESSION_STORE_TYPE: redis 
      OAUTH2_PROXY_REDIS_CONNECTION_URL: redis://redis
      
      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: false
      OAUTH2_PROXY_OIDC_EMAIL_CLAIM: sub 
      OAUTH2_PROXY_SET_XAUTHREQUEST: true
      
      
      OAUTH2_PROXY_OIDC_EXTRA_AUDIENCES: api://default 

      OAUTH2_PROXY_COOKIE_REFRESH: 15m
      
      OAUTH2_PROXY_COOKIE_SECRET: OAUTH2_PROXY_COOKIE_SECRET_32_bt
      OAUTH2_PROXY_CUSTOM_TEMPLATES_DIR: /etc/oauth2proxy/www/
      OAUTH2_PROXY_CUSTOM_SIGN_IN_LOGO: /etc/oauth2proxy/www/owa_logo.svg

    depends_on:
      - redis   
      - nginx
    ports:
      - 4180:4180 
      - 8080:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"      
    networks:
      - obox
  redis:
    image: redis:7.0.2-alpine3.16
    volumes:
      - redis-cache:/data
    networks:
      - obox
 
       
  devicegateway:
    image: public.ecr.aws/takebishi/tkbs-dgwd20:latest
    hostname: ${DEVICE_GATEWAY_HOST}
    ports:
      - "3280:80"
      - "3243:443"
      - "52220:52220"
      - "3221:21"
      - "30300-30309:30000-30009"
      - "32510:57510"
#    devices:
#      - "/dev/ttyACM0"
#      - "/dev/hidraw0"
    networks:
      - obox
    volumes:
      - dgwvol:/etc/dxpgateway
      - dgw_sdcard:/mnt/sdcard
      
  ovl:
    image: 'ogamma/logger:4.0.0'
    restart: always
    environment:    
# By default configuration file ./data/config.json is used. Can be changed by environment variable:    
      - OVL_CONFIG_FILE=./data/config.json
# Do not use default credentials in production!
      - OVL_USER_ID=${OVL_USER_ID}
      - OVL_USER_PASSWORD=${OVL_USER_PASSWORD}
      
      # oauth settiggs:
      - OVL_AUTH_TYPE=JWT_BUILTIN
      - OVL_JWT_VERIFY=1
      - OVL_JWT_KEY_URL =iss
      - OVL_JWT_ROLES_PATH=realm_access/roles
      - OLV_JWT_ROLE_MAP_READ=ovl-read
      - OLV_JWT_ROLE_MAP_WRITE=ovl-write
      - OLV_JWT_ROLE_MAP_WRITE=ovl-admin
    
    ports:
      - "4880:4880"
    hostname: ${OVL_HOST}
    volumes:
#- './data:/home/ogamma/logger/data'
      - 'ovl-data:/home/ogamma/logger/data'
    networks:
      - obox
      
# Please contact support@onewayautomation.com to grant access to the ProsysOPC UA Forge container image.
# Or comment it to disable.
  forge:
    image: ogamma.azurecr.io/prosys-opc-ua-forge:latest
    hostname: ${FORGE_HOST}
    environment:
      - JAVA_TOOL_OPTIONS="--add-opens=java.base/java.lang=ALL-UNNAMED -Dapp.home=/home/nonroot/data/"
    user: root
    ports:
      - "8990:8080"
      - "8943:8443"
      - "56560:56560"
    volumes:
      - forgevol:/home/nonroot
    networks:
      - obox
      
  timescaledb:
    image: timescale/timescaledb:2.10.1-pg14-oss
    environment:
      - POSTGRES_USER=${TIMESCALEDB_USER}
      - POSTGRES_PASSWORD=${TIMESCALEDB_USER}
      - POSTGRES_DB=ogammalogger
    volumes:
      - 'ogamma-logger-tsdb-data-oss:/var/lib/postgresql/data'
    ports:
      - "5432:5432"
    networks:
      - obox 
      
# Web based PostgreSQL database management tool.       
  pgadmin:
    image: dpage/pgadmin4:6.13
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_LISTEN_PORT=4888
    volumes:
      - ogamma-logger-pgadmin:/var/lib/pgadmin
    ports:
      - "4888:4888"
    networks:
      - obox      

  #modbus-opcua-server:
  #  image: 'ogamma/modbus-opcua-server'
  #  restart: always
  #  hostname: modbus-opcua-server
  #  privileged: true
  #  ports:
  #    - '4848:4848'
   
  tunnel:
    image: cloudflare/cloudflared:latest
    networks:
      - obox    
    restart: always
    command: tunnel run
    privileged: true
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN
    labels:
      io.balena.features.dbus: '1'
    environment:
      DBUS_SYSTEM_BUS_ADDRESS: "unix:path=/host/run/dbus/system_bus_socket"  
      TUNNEL_TOKEN: ${TUNNEL_TOKEN}
  grafana:
    build: 
      context: ./grafana
      cache_from: []
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-simple-json-datasource,grafana-influxdb-flux-datasource,natel-discrete-panel,briangann-gauge-panel,aceiot-svg-panel,fatcloud-windrose-panel
    ports:
      - '3000:3000'
    volumes:
      - 'ogamma-logger-grafana:/var/lib/grafana'
    networks:
      - obox
  influxdb2:
    image: influxdb:2.7.4
    restart: always
    volumes:
      - 'ogamma-logger-influxdb2-data:/var/lib/influxdb2'
    ports:
      - '8086:8086'
    networks:
      - obox  
      
  influxdb:
    image: influxdb:1.8.10
    restart: always
    environment:
      - INFLUXDB_DB=testcodb
      - INFLUXDB_ADMIN_ENABLED=true
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - INFLUXDB_USER=${INFLUXDB_USER}
      - INFLUXDB_USER_PASSWORD=${INFLUXDB_USER_PASSWORD}
      - INFLUXDB_HTTP_ENABLED=true
      - INFLUXDB_HTTP_AUTH_ENABLED=false
    volumes:
      - 'ogamma-logger-influxdb-data:/var/lib/influxdb'
    ports:
      - '8084:8086'
    privileged: true      
    
    networks:
      - obox  
  timeseriesadmin:
    image: timeseriesadmin/timeseriesadmin:0.1.13
    hostname: ${TIMESERIESADMIN_HOST}
    ports:
      - '8085:80'
    networks:
      - obox  
    privileged: true
      
  emqx:
    image: emqx:latest
    restart: always
    hostname: ${EMQX_HOST}
    environment:
      EMQX_NAME: emqx
      EMQX_HOST: 127.0.0.1
    ports: 
      - '18083:18083'
      - '1883:1883'
    volumes:
      - 'vol-emqx-data:/opt/emqx/data'
      - 'vol-emqx-etc:/opt/emqx/etc'
      - 'vol-emqx-log:/opt/emqx/log'
    networks:
      - obox 
      
  ekuiper:
    image: lfedge/ekuiper:latest
    ports: 
      - '9081:9081'
    environment:
      MQTT_SOURCE__DEFAULT__SERVER: "tcp://${EMQX_HOST}:1883"
    volumes:
      - 'kuiper-data:/kuiper/data'
      - 'kuiper-etc:/kuiper/etc'
      - 'kuiper-connections:/kuiper/etc/connections'
      - 'kuiper-sources:/kuiper/etc/sources'
      - 'kuiper-log:/kuiper/log'
      - 'kuiper-plugins:/kuiper/plugins'
      
    networks:
      - obox  
      
  ekuiper-manager:   
    hostname: ${EKUIPER_MANAGER_HOST}
    image: emqx/ekuiper-manager:1.8
    restart: always
    environment:
      DEFAULT_EKUIPER_ENDPOINT: "http://${EKUIPER_MANAGER_HOST}:9081"
    ports:
      - '9082:9082'
    networks:
      - obox  
  portainer:
    image: 'portainer/portainer'
    restart: always
    ports:
      - '9000:9000'
    volumes:
      - 'obox_portainer_data:/data'
      - '/var/run/docker.sock:/var/run/docker.sock'
      
    networks:
      - obox
  
volumes:
  ogamma-logger-tsdb-data-oss: {}
  ogamma-logger-pgadmin: {}
  ovl-data: {}
  modbus-data: {}
  gw-data: {}
  dgwvol: {}
  dgw_sdcard: {}
  ogamma-logger-grafana: {}
  ogamma-logger-influxdb2-data: {}
  ogamma-logger-influxdb-data: {}
  vol-emqx-data: {}
  vol-emqx-etc: {}
  vol-emqx-log: {}
  kuiper-data: {}
  kuiper-etc: {}
  kuiper-connections: {}
  kuiper-sources: {}
  kuiper-log: {}
  kuiper-plugins: {}
  
  dgwvol2: {}
  dgw_sdcard2: {}
  forgevol: {}
  
  keycloak-postgresql-data: {}
  
  redis-cache:
    driver: local

  obox_portainer_data: {}    
networks:
  obox:
    driver: bridge
